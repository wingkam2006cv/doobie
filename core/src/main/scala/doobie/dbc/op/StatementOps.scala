package doobie.dbc
package op

import enum._
import scalaz._
import Scalaz._
import scalaz.effect.IO
import scalaz.effect.kleisliEffect._
import scalaz.syntax.effect.monadCatchIO._
import java.sql
import Predef.intArrayOps

trait StatementOps[A <: sql.Statement] extends PrimitiveOps[A] {
  
  def addBatch(sql: String): Action[Unit] =
    primitive(s"addBatch($sql)", _.addBatch(sql))

  def cancel: Action[Unit] =
    primitive(s"cancel", _.cancel)

  def clearBatch: Action[Unit] =
    primitive(s"clearBatch", _.clearBatch)

  def clearWarnings: Action[Unit] =
    primitive(s"clearWarnings", _.clearWarnings)

  def close: Action[Unit] =
    primitive("close", _.close)

  def execute(sql: String): Action[Boolean] =
    primitive(s"execute($sql)", _.execute(sql))

  def execute(sql: String, autoGeneratedKeys: Int): Action[Boolean] =
    primitive(s"execute($sql, $autoGeneratedKeys)", _.execute(sql, autoGeneratedKeys))

  // def execute(sql: String, columnIndexes: Array[Int]): Action[Boolean] =
  //   ???

  // def execute(sql: String, columnNames: Array[String]): Action[Boolean] =
  //   ???

  def executeBatch: Action[List[Int]] =
    primitive(s"executeBatch", _.executeBatch.toList)

  def executeQuery[A](sql: String)(k: ResultSet[A]): Action[A] =
    gosub(primitive(s"executeQuery", _.executeQuery(sql)), k, resultset.close)

  def executeUpdate(sql: String): Action[Int] =
    primitive(s"executeUpdate($sql)", _.executeUpdate(sql))

  // def executeUpdate(sql: String, autoGeneratedKeys: Int): Action[Int] =
  //   ???

  // def executeUpdate(sql: String, columnIndexes: Array[Int]): Action[Int] =
  //   ???

  // def executeUpdate(sql: String, columnNames: Array[String]): Action[Int] =
  //   ???

  def getConnection[A](k: Connection[A]): Action[A] =
    gosub0(primitive(s"", _.getConnection), k)

  def getFetchDirection: Action[FetchDirection] =
    primitive(s"getFetchDirection", _.getFetchDirection).map(FetchDirection.unsafeFromInt)

  def getFetchSize: Action[Int] =
    primitive(s"getFetchSize", _.getFetchSize)

  def getGeneratedKeys(k: ResultSet[A]): Action[A] =
    gosub(primitive(s"getGeneratedKeys", _.getGeneratedKeys), k, resultset.close)

  def getMaxFieldSize: Action[Int] =
    primitive(s"getMaxFieldSize", _.getMaxFieldSize)

  def getMaxRows: Action[Int] =
    primitive(s"getMaxRows", _.getMaxRows)

  def getMoreResults: Action[Boolean] =
    primitive(s"getMoreResults", _.getMoreResults)

  def getMoreResults(current: Int): Action[Boolean] =
    primitive(s"getMoreResults($current)", _.getMoreResults(current))

  def getQueryTimeout: Action[Int] =
    primitive(s"getQueryTimeout", _.getQueryTimeout)

  def getResultSet(k: ResultSet[A]): Action[A] =
    gosub0(primitive(s"getResultSet", _.getResultSet), k)

  def getResultSetConcurrency: Action[ResultSetConcurrency] =
    primitive(s"getResultSetConcurrency", _.getResultSetConcurrency).map(ResultSetConcurrency.unsafeFromInt)

  def getResultSetType: Action[ResultSetType] =
    primitive(s"getResultSetType", _.getResultSetType).map(ResultSetType.unsafeFromInt)

  def getUpdateCount: Action[Int] =
    primitive(s"getUpdateCount", _.getUpdateCount)

  def getWarnings: Action[sql.SQLWarning] = 
    primitive(s"getWarnings", _.getWarnings)

  def setCursorName(name: String): Action[Unit] =
    primitive(s"setCursorName($name)", _.setCursorName(name))

  def setEscapeProcessing(enable: Boolean): Action[Unit] =
    primitive(s"setEscapeProcessing($enable)", _.setEscapeProcessing(enable))

  def setFetchDirection(direction: FetchDirection): Action[Unit] =
    primitive(s"setFetchDirection($direction)", _.setFetchDirection(direction.toInt))

  def setFetchSize(rows: Int): Action[Unit] =
    primitive(s"setFetchSize($rows)", _.setFetchSize(rows))

  def setMaxFieldSize(max: Int): Action[Unit] =
    primitive(s"setMaxFieldSize($max)", _.setMaxFieldSize(max))

  def setMaxRows(max: Int): Action[Unit] =
    primitive(s"setMaxRows($max)", _.setMaxRows(max))

  def setQueryTimeout(seconds: Int): Action[Unit] =
    primitive(s"setQueryTimeout($seconds)", _.setQueryTimeout(seconds))

}


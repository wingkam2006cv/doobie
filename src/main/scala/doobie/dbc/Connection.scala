package doobie
package dbc

import scala.collection.JavaConverters._
import scalaz.effect.IO
import scalaz.syntax.monad._
import java.sql

object connection extends util.TWorld[java.sql.Connection] {

  type Connection[+A] = Action[A]

  private[dbc] def run[A](a: Connection[A], s: sql.Connection): IO[A] = 
    eval(a, s).map(_._2)

  def clearWarnings: Connection[Unit] = 
    effect(_.clearWarnings)

  def close: Connection[Unit] =
    effect(_.close)

  def commit: Connection[Unit] = 
    effect(_.commit)

  def createStatement[A](k: Statement[A]): Connection[A] = 
    for {
      s <- effect(_.createStatement)
      a <- statement.run(k, s).ensuring(IO(s.close)).liftIO[Connection]
    } yield a

  def createStatement[A](rst: ResultSetType, rsc: ResultSetConcurrency)(k: Statement[A]): Connection[A] = 
    for {
      s <- effect(_.createStatement(rst.toInt, rsc.toInt))
      a <- statement.run(k, s).ensuring(IO(s.close)).liftIO[Connection]
    } yield a

  def getAutoCommit: Connection[Boolean] = 
    effect(_.getAutoCommit)

  def getCatalog: Connection[String] = 
    effect(_.getCatalog)

  def getMetaData[A](k: DatabaseMetaData[A]): Connection[A] =
    for {
      d <- effect(_.getMetaData)
      a <- databasemetadata.run(k, d).liftIO[Connection]
    } yield a

  def getTransactionIsolation: Connection[IsolationLevel] = 
    effect(_.getTransactionIsolation).map(IsolationLevel.unsafeFromInt)

  def getTypeMap: Connection[Map[String, Class[_]]] = 
    effect(_.getTypeMap.asScala.toMap)

  def getWarnings: Connection[sql.SQLWarning] = 
    effect(_.getWarnings)

  def isClosed: Connection[Boolean] =
    effect(_.isClosed)

  def isReadOnly: Connection[Boolean] = 
    effect(_.isReadOnly)

  def nativeSQL(sql: String): Connection[String] =
    effect(_.nativeSQL(sql))

  def prepareCall[A](sql: String)(k: CallableStatement[A]): Connection[A] =
    for {
      s <- effect(_.prepareCall(sql))
      a <- callablestatement.run(k, s).ensuring(IO(s.close)).liftIO[Connection]
    } yield a

  def prepareCall[A](sql: String, rst: ResultSetType, rsc: ResultSetConcurrency)(k: CallableStatement[A]): Connection[A] =
    for {
      s <- effect(_.prepareCall(sql, rst.toInt, rsc.toInt))
      a <- callablestatement.run(k, s).ensuring(IO(s.close)).liftIO[Connection]
    } yield a

  // def prepareStatement(sql: String, autoGeneratedKeys: Int): Connection[PreparedStatement] =
  //   ???

  // def prepareStatement(sql: String, columnIndexes: Array[Int]): Connection[PreparedStatement] =
  //   ???

  def prepareStatement[A](sql: String)(k: PreparedStatement[A]): Connection[A] =
    for {
      s <- effect(_.prepareStatement(sql))
      a <- preparedstatement.run(k, s).ensuring(IO(s.close)).liftIO[Connection]
    } yield a

  def prepareStatement[A](sql: String, rst: ResultSetType, rsc: ResultSetConcurrency)(k: PreparedStatement[A]): Connection[A] =
    for {
      s <- effect(_.prepareStatement(sql, rst.toInt, rsc.toInt))
      a <- preparedstatement.run(k, s).ensuring(IO(s.close)).liftIO[Connection]
    } yield a

  // def prepareStatement(sql: String, columnNames: Array[String]): Connection[PreparedStatement] =
  //   ???

  def releaseSavepoint(savepoint: Savepoint): Connection[Unit] =
    effect(_.releaseSavepoint(savepoint))

  def rollback: Connection[Unit] = 
    effect(_.rollback)

  def rollback(savepoint: Savepoint): Connection[Unit] =
    effect(_.rollback(savepoint))

  def setAutoCommit(autoCommit: Boolean): Connection[Unit] =
    effect(_.setAutoCommit(autoCommit))

  def setCatalog(catalog: String): Connection[Unit] =
    effect(_.setCatalog(catalog))

  def setReadOnly(readOnly: Boolean): Connection[Unit] =
    effect(_.setReadOnly(readOnly))

  def setSavepoint: Connection[Savepoint] =
    effect(_.setSavepoint)

  def setSavepoint(name: String): Connection[Savepoint] =
    effect(_.setSavepoint(name))

  def setTransactionIsolation(level: IsolationLevel): Connection[Unit] =
    effect(_.setTransactionIsolation(level.toInt))

  def setTypeMap(map: Map[String, Class[_]]): Connection[Unit] =
    effect(_.setTypeMap(map.asJava))

}

